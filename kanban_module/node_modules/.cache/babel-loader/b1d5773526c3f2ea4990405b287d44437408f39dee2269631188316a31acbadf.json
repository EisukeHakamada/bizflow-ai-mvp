{"ast":null,"code":"// Firebase設定とデータ操作\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, doc, getDocs, addDoc, updateDoc, deleteDoc, onSnapshot, query, orderBy, where, Timestamp } from 'firebase/firestore';\n// Firebase設定\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Firebaseアプリの初期化\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\n\n// コレクション参照\nexport const tasksCollection = collection(db, 'tasks');\nexport const columnsCollection = collection(db, 'columns');\n\n// データ型変換ヘルパー\nconst convertFirestoreTask = doc => {\n  var _doc$data$createdAt, _doc$data$updatedAt;\n  return {\n    id: doc.id,\n    title: doc.data().title,\n    description: doc.data().description || '',\n    priority: doc.data().priority || 'medium',\n    columnId: doc.data().columnId,\n    assignee: doc.data().assignee || '',\n    dueDate: doc.data().dueDate || '',\n    tags: doc.data().tags || [],\n    createdAt: ((_doc$data$createdAt = doc.data().createdAt) === null || _doc$data$createdAt === void 0 ? void 0 : _doc$data$createdAt.toDate()) || new Date(),\n    updatedAt: ((_doc$data$updatedAt = doc.data().updatedAt) === null || _doc$data$updatedAt === void 0 ? void 0 : _doc$data$updatedAt.toDate()) || new Date()\n  };\n};\nconst convertFirestoreColumn = doc => ({\n  id: doc.id,\n  title: doc.data().title,\n  color: doc.data().color,\n  order: doc.data().order || 0,\n  taskIds: doc.data().taskIds || []\n});\n\n// タスク操作\nexport const taskOperations = {\n  // 全タスクを取得\n  async getAllTasks() {\n    try {\n      const q = query(tasksCollection, orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(convertFirestoreTask);\n    } catch (error) {\n      console.error('タスクの取得に失敗しました:', error);\n      throw error;\n    }\n  },\n  // プロジェクト別タスクを取得\n  async getTasksByProject(projectId) {\n    try {\n      const q = query(tasksCollection, where('projectId', '==', projectId), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(convertFirestoreTask);\n    } catch (error) {\n      console.error('プロジェクトタスクの取得に失敗しました:', error);\n      throw error;\n    }\n  },\n  // タスクを追加\n  async addTask(task) {\n    try {\n      const docRef = await addDoc(tasksCollection, {\n        ...task,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('タスクの追加に失敗しました:', error);\n      throw error;\n    }\n  },\n  // タスクを更新\n  async updateTask(taskId, updates) {\n    try {\n      const taskRef = doc(db, 'tasks', taskId);\n      await updateDoc(taskRef, {\n        ...updates,\n        updatedAt: Timestamp.now()\n      });\n    } catch (error) {\n      console.error('タスクの更新に失敗しました:', error);\n      throw error;\n    }\n  },\n  // タスクを削除\n  async deleteTask(taskId) {\n    try {\n      const taskRef = doc(db, 'tasks', taskId);\n      await deleteDoc(taskRef);\n    } catch (error) {\n      console.error('タスクの削除に失敗しました:', error);\n      throw error;\n    }\n  },\n  // タスクのカラム移動\n  async moveTask(taskId, newColumnId) {\n    try {\n      await this.updateTask(taskId, {\n        columnId: newColumnId\n      });\n    } catch (error) {\n      console.error('タスクの移動に失敗しました:', error);\n      throw error;\n    }\n  },\n  // リアルタイムリスナー\n  onTasksChange(callback) {\n    const q = query(tasksCollection, orderBy('createdAt', 'desc'));\n    return onSnapshot(q, querySnapshot => {\n      const tasks = querySnapshot.docs.map(convertFirestoreTask);\n      callback(tasks);\n    });\n  }\n};\n\n// カラム操作\nexport const columnOperations = {\n  // 全カラムを取得\n  async getAllColumns() {\n    try {\n      const q = query(columnsCollection, orderBy('order', 'asc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(convertFirestoreColumn);\n    } catch (error) {\n      console.error('カラムの取得に失敗しました:', error);\n      throw error;\n    }\n  },\n  // カラムを追加\n  async addColumn(column) {\n    try {\n      const docRef = await addDoc(columnsCollection, column);\n      return docRef.id;\n    } catch (error) {\n      console.error('カラムの追加に失敗しました:', error);\n      throw error;\n    }\n  },\n  // カラムを更新\n  async updateColumn(columnId, updates) {\n    try {\n      const columnRef = doc(db, 'columns', columnId);\n      await updateDoc(columnRef, updates);\n    } catch (error) {\n      console.error('カラムの更新に失敗しました:', error);\n      throw error;\n    }\n  },\n  // カラムを削除\n  async deleteColumn(columnId) {\n    try {\n      const columnRef = doc(db, 'columns', columnId);\n      await deleteDoc(columnRef);\n    } catch (error) {\n      console.error('カラムの削除に失敗しました:', error);\n      throw error;\n    }\n  },\n  // リアルタイムリスナー\n  onColumnsChange(callback) {\n    const q = query(columnsCollection, orderBy('order', 'asc'));\n    return onSnapshot(q, querySnapshot => {\n      const columns = querySnapshot.docs.map(convertFirestoreColumn);\n      callback(columns);\n    });\n  }\n};\n\n// 初期データセットアップ\nexport const setupInitialData = async () => {\n  try {\n    // 既存のカラムを確認\n    const existingColumns = await columnOperations.getAllColumns();\n    if (existingColumns.length === 0) {\n      // 初期カラムを作成\n      const initialColumns = [{\n        title: 'To Do',\n        color: '#ef4444',\n        order: 0,\n        taskIds: []\n      }, {\n        title: 'In Progress',\n        color: '#f97316',\n        order: 1,\n        taskIds: []\n      }, {\n        title: 'Review',\n        color: '#3b82f6',\n        order: 2,\n        taskIds: []\n      }, {\n        title: 'Done',\n        color: '#10b981',\n        order: 3,\n        taskIds: []\n      }];\n      for (const column of initialColumns) {\n        await columnOperations.addColumn(column);\n      }\n      console.log('初期カラムを作成しました');\n    }\n\n    // 既存のタスクを確認\n    const existingTasks = await taskOperations.getAllTasks();\n    if (existingTasks.length === 0) {\n      var _columns$, _columns$2, _columns$3;\n      // 再度カラムを取得（IDが必要）\n      const columns = await columnOperations.getAllColumns();\n\n      // 初期タスクを作成\n      const initialTasks = [{\n        title: 'プロジェクト企画書作成',\n        description: '新規プロジェクトの企画書を作成する',\n        priority: 'high',\n        columnId: ((_columns$ = columns[0]) === null || _columns$ === void 0 ? void 0 : _columns$.id) || '',\n        assignee: '田中太郎',\n        dueDate: '2025-07-25',\n        tags: ['企画', '優先']\n      }, {\n        title: 'UIデザイン検討',\n        description: 'ユーザーインターフェースのデザインを検討',\n        priority: 'medium',\n        columnId: ((_columns$2 = columns[0]) === null || _columns$2 === void 0 ? void 0 : _columns$2.id) || '',\n        assignee: '鈴木花子',\n        dueDate: '2025-07-30',\n        tags: ['デザイン']\n      }, {\n        title: 'API仕様書作成',\n        description: 'バックエンドAPIの仕様書を作成',\n        priority: 'high',\n        columnId: ((_columns$3 = columns[1]) === null || _columns$3 === void 0 ? void 0 : _columns$3.id) || '',\n        assignee: '佐藤次郎',\n        dueDate: '2025-07-28',\n        tags: ['API', '技術']\n      }];\n      for (const task of initialTasks) {\n        await taskOperations.addTask(task);\n      }\n      console.log('初期タスクを作成しました');\n    }\n  } catch (error) {\n    console.error('初期データのセットアップに失敗しました:', error);\n  }\n};\n\n// プロジェクト管理\nexport const projectOperations = {\n  // プロジェクト統計を取得\n  async getProjectStats(projectId) {\n    try {\n      const tasks = projectId ? await taskOperations.getTasksByProject(projectId) : await taskOperations.getAllTasks();\n      const totalTasks = tasks.length;\n      const completedTasks = tasks.filter(task => task.columnId.includes('done') || task.columnId.includes('完了')).length;\n      const inProgressTasks = tasks.filter(task => task.columnId.includes('progress') || task.columnId.includes('進行')).length;\n      const todoTasks = tasks.filter(task => task.columnId.includes('todo') || task.columnId.includes('待機')).length;\n      const completionRate = totalTasks > 0 ? completedTasks / totalTasks * 100 : 0;\n      return {\n        totalTasks,\n        completedTasks,\n        inProgressTasks,\n        todoTasks,\n        completionRate\n      };\n    } catch (error) {\n      console.error('プロジェクト統計の取得に失敗しました:', error);\n      throw error;\n    }\n  }\n};\nexport default app;","map":{"version":3,"names":["initializeApp","getFirestore","collection","doc","getDocs","addDoc","updateDoc","deleteDoc","onSnapshot","query","orderBy","where","Timestamp","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","db","tasksCollection","columnsCollection","convertFirestoreTask","_doc$data$createdAt","_doc$data$updatedAt","id","title","data","description","priority","columnId","assignee","dueDate","tags","createdAt","toDate","Date","updatedAt","convertFirestoreColumn","color","order","taskIds","taskOperations","getAllTasks","q","querySnapshot","docs","map","error","console","getTasksByProject","addTask","task","docRef","now","updateTask","taskId","updates","taskRef","deleteTask","moveTask","newColumnId","onTasksChange","callback","tasks","columnOperations","getAllColumns","addColumn","column","updateColumn","columnRef","deleteColumn","onColumnsChange","columns","setupInitialData","existingColumns","length","initialColumns","log","existingTasks","_columns$","_columns$2","_columns$3","initialTasks","projectOperations","getProjectStats","totalTasks","completedTasks","filter","includes","inProgressTasks","todoTasks","completionRate"],"sources":["/Users/eisuke/bizflow_ai_mvp/kanban_module/src/firebase/config.ts"],"sourcesContent":["// Firebase設定とデータ操作\nimport { initializeApp } from 'firebase/app';\nimport { \n  getFirestore, \n  collection, \n  doc, \n  getDocs, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  onSnapshot,\n  query,\n  orderBy,\n  where,\n  Timestamp \n} from 'firebase/firestore';\nimport { Task, ColumnType } from '../types';\n\n// Firebase設定\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Firebaseアプリの初期化\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\n\n// コレクション参照\nexport const tasksCollection = collection(db, 'tasks');\nexport const columnsCollection = collection(db, 'columns');\n\n// データ型変換ヘルパー\nconst convertFirestoreTask = (doc: any): Task => ({\n  id: doc.id,\n  title: doc.data().title,\n  description: doc.data().description || '',\n  priority: doc.data().priority || 'medium',\n  columnId: doc.data().columnId,\n  assignee: doc.data().assignee || '',\n  dueDate: doc.data().dueDate || '',\n  tags: doc.data().tags || [],\n  createdAt: doc.data().createdAt?.toDate() || new Date(),\n  updatedAt: doc.data().updatedAt?.toDate() || new Date(),\n});\n\nconst convertFirestoreColumn = (doc: any): ColumnType => ({\n  id: doc.id,\n  title: doc.data().title,\n  color: doc.data().color,\n  order: doc.data().order || 0,\n  taskIds: doc.data().taskIds || [],\n});\n\n// タスク操作\nexport const taskOperations = {\n  // 全タスクを取得\n  async getAllTasks(): Promise<Task[]> {\n    try {\n      const q = query(tasksCollection, orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(convertFirestoreTask);\n    } catch (error) {\n      console.error('タスクの取得に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // プロジェクト別タスクを取得\n  async getTasksByProject(projectId: string): Promise<Task[]> {\n    try {\n      const q = query(\n        tasksCollection, \n        where('projectId', '==', projectId),\n        orderBy('createdAt', 'desc')\n      );\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(convertFirestoreTask);\n    } catch (error) {\n      console.error('プロジェクトタスクの取得に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // タスクを追加\n  async addTask(task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    try {\n      const docRef = await addDoc(tasksCollection, {\n        ...task,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now(),\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('タスクの追加に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // タスクを更新\n  async updateTask(taskId: string, updates: Partial<Task>): Promise<void> {\n    try {\n      const taskRef = doc(db, 'tasks', taskId);\n      await updateDoc(taskRef, {\n        ...updates,\n        updatedAt: Timestamp.now(),\n      });\n    } catch (error) {\n      console.error('タスクの更新に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // タスクを削除\n  async deleteTask(taskId: string): Promise<void> {\n    try {\n      const taskRef = doc(db, 'tasks', taskId);\n      await deleteDoc(taskRef);\n    } catch (error) {\n      console.error('タスクの削除に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // タスクのカラム移動\n  async moveTask(taskId: string, newColumnId: string): Promise<void> {\n    try {\n      await this.updateTask(taskId, { columnId: newColumnId });\n    } catch (error) {\n      console.error('タスクの移動に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // リアルタイムリスナー\n  onTasksChange(callback: (tasks: Task[]) => void): () => void {\n    const q = query(tasksCollection, orderBy('createdAt', 'desc'));\n    return onSnapshot(q, (querySnapshot) => {\n      const tasks = querySnapshot.docs.map(convertFirestoreTask);\n      callback(tasks);\n    });\n  },\n};\n\n// カラム操作\nexport const columnOperations = {\n  // 全カラムを取得\n  async getAllColumns(): Promise<ColumnType[]> {\n    try {\n      const q = query(columnsCollection, orderBy('order', 'asc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(convertFirestoreColumn);\n    } catch (error) {\n      console.error('カラムの取得に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // カラムを追加\n  async addColumn(column: Omit<ColumnType, 'id'>): Promise<string> {\n    try {\n      const docRef = await addDoc(columnsCollection, column);\n      return docRef.id;\n    } catch (error) {\n      console.error('カラムの追加に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // カラムを更新\n  async updateColumn(columnId: string, updates: Partial<ColumnType>): Promise<void> {\n    try {\n      const columnRef = doc(db, 'columns', columnId);\n      await updateDoc(columnRef, updates);\n    } catch (error) {\n      console.error('カラムの更新に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // カラムを削除\n  async deleteColumn(columnId: string): Promise<void> {\n    try {\n      const columnRef = doc(db, 'columns', columnId);\n      await deleteDoc(columnRef);\n    } catch (error) {\n      console.error('カラムの削除に失敗しました:', error);\n      throw error;\n    }\n  },\n\n  // リアルタイムリスナー\n  onColumnsChange(callback: (columns: ColumnType[]) => void): () => void {\n    const q = query(columnsCollection, orderBy('order', 'asc'));\n    return onSnapshot(q, (querySnapshot) => {\n      const columns = querySnapshot.docs.map(convertFirestoreColumn);\n      callback(columns);\n    });\n  },\n};\n\n// 初期データセットアップ\nexport const setupInitialData = async (): Promise<void> => {\n  try {\n    // 既存のカラムを確認\n    const existingColumns = await columnOperations.getAllColumns();\n    \n    if (existingColumns.length === 0) {\n      // 初期カラムを作成\n      const initialColumns = [\n        { title: 'To Do', color: '#ef4444', order: 0, taskIds: [] },\n        { title: 'In Progress', color: '#f97316', order: 1, taskIds: [] },\n        { title: 'Review', color: '#3b82f6', order: 2, taskIds: [] },\n        { title: 'Done', color: '#10b981', order: 3, taskIds: [] },\n      ];\n\n      for (const column of initialColumns) {\n        await columnOperations.addColumn(column);\n      }\n\n      console.log('初期カラムを作成しました');\n    }\n\n    // 既存のタスクを確認\n    const existingTasks = await taskOperations.getAllTasks();\n    \n    if (existingTasks.length === 0) {\n      // 再度カラムを取得（IDが必要）\n      const columns = await columnOperations.getAllColumns();\n      \n      // 初期タスクを作成\n      const initialTasks = [\n        {\n          title: 'プロジェクト企画書作成',\n          description: '新規プロジェクトの企画書を作成する',\n          priority: 'high' as const,\n          columnId: columns[0]?.id || '',\n          assignee: '田中太郎',\n          dueDate: '2025-07-25',\n          tags: ['企画', '優先'],\n        },\n        {\n          title: 'UIデザイン検討',\n          description: 'ユーザーインターフェースのデザインを検討',\n          priority: 'medium' as const,\n          columnId: columns[0]?.id || '',\n          assignee: '鈴木花子',\n          dueDate: '2025-07-30',\n          tags: ['デザイン'],\n        },\n        {\n          title: 'API仕様書作成',\n          description: 'バックエンドAPIの仕様書を作成',\n          priority: 'high' as const,\n          columnId: columns[1]?.id || '',\n          assignee: '佐藤次郎',\n          dueDate: '2025-07-28',\n          tags: ['API', '技術'],\n        },\n      ];\n\n      for (const task of initialTasks) {\n        await taskOperations.addTask(task);\n      }\n\n      console.log('初期タスクを作成しました');\n    }\n  } catch (error) {\n    console.error('初期データのセットアップに失敗しました:', error);\n  }\n};\n\n// プロジェクト管理\nexport const projectOperations = {\n  // プロジェクト統計を取得\n  async getProjectStats(projectId?: string): Promise<{\n    totalTasks: number;\n    completedTasks: number;\n    inProgressTasks: number;\n    todoTasks: number;\n    completionRate: number;\n  }> {\n    try {\n      const tasks = projectId \n        ? await taskOperations.getTasksByProject(projectId)\n        : await taskOperations.getAllTasks();\n      \n      const totalTasks = tasks.length;\n      const completedTasks = tasks.filter(task => task.columnId.includes('done') || task.columnId.includes('完了')).length;\n      const inProgressTasks = tasks.filter(task => task.columnId.includes('progress') || task.columnId.includes('進行')).length;\n      const todoTasks = tasks.filter(task => task.columnId.includes('todo') || task.columnId.includes('待機')).length;\n      const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n\n      return {\n        totalTasks,\n        completedTasks,\n        inProgressTasks,\n        todoTasks,\n        completionRate,\n      };\n    } catch (error) {\n      console.error('プロジェクト統計の取得に失敗しました:', error);\n      throw error;\n    }\n  },\n};\n\nexport default app;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}